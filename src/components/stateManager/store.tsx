import React, { useEffect, useState } from "react";
import context from "./context";
import createReducer from "./createReducer";
import loadUserConfig, { S, ActionsMap } from "./loadUserConfig";

// –°–æ–∑–¥–∞—ë–º –∫–æ–Ω—Ç–µ–∫—Å—Ç —Å —Ç–∏–ø–æ–º —Å–æ—Å—Ç–æ—è–Ω–∏—è S
type NexusContextType = {
  useGetNexus: <K extends keyof S>(stateName: K) => S[K];
  useSetNexus: () => (value: ActionsMap | Partial<S>) => void;
  useNexusAll: () => S;
  useSelector: <K extends keyof S>(selector: (state: S) => S[K]) => S[K];
};

const NexusContext = React.createContext<NexusContextType | undefined>(
  undefined
);

// NexusProvider –ø—Ä–∏–Ω–∏–º–∞–µ—Ç –∫–æ–Ω—Ñ–∏–≥—É—Ä–∞—Ü–∏—é —Å–æ—Å—Ç–æ—è–Ω–∏–π –∏ —Ä–µ–¥—å—é—Å–µ—Ä–∞
const NexusProvider: React.FC<{ children: React.ReactNode }> = ({
  children,
}) => {
  const [initialStates, setInitialStates] = useState<S | null>(null);
  const [actions, setActions] = useState<ActionsMap | null>(null);
  const [isLoading, setIsLoading] = useState(true);

  useEffect(() => {
    const loadConfig = async () => {
      const config = await loadUserConfig();
      if (config) {
        setInitialStates(config.initialStates);
        setActions(config.actions);
      }
      setIsLoading(false);
    };
    loadConfig();
  }, []);

  if (isLoading) {
    return <div>Loading...</div>; // –∏–ª–∏ –ª—é–±–æ–π –¥—Ä—É–≥–æ–π –∏–Ω–¥–∏–∫–∞—Ç–æ—Ä –∑–∞–≥—Ä—É–∑–∫–∏
  }

  if (!initialStates || !actions) {
    return <div>Error loading configuration</div>; // –æ–±—Ä–∞–±–æ—Ç–∫–∞ –æ—à–∏–±–æ–∫
  }

  const reducer = createReducer(actions);
  const Nexus = context(initialStates, reducer);

  const contextValue: NexusContextType = {
    useGetNexus: Nexus.useGetNexus,
    useSetNexus: Nexus.useSetNexus,
    useNexusAll: Nexus.useNexusAll,
    useSelector: Nexus.useSelector,
  };

  return (
    <NexusContext.Provider value={contextValue}>
      <Nexus.NexusContextProvider>{children}</Nexus.NexusContextProvider>
    </NexusContext.Provider>
  );
};

// –•—É–∫–∏ –¥–ª—è –ø–æ–ª—É—á–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è –ø–æ –∫–ª—é—á—É
function contextExist() {
  const ctx = React.useContext(NexusContext);
  if (!ctx) {
    throw new Error("NexusProvider not found üë∫");
  }
  return ctx;
}

function useGetNexus<K extends keyof S>(stateName: K): S[K];
function useGetNexus(): S;
function useGetNexus(stateName?: keyof S) {
  const ctx = contextExist();
  return stateName ? ctx.useGetNexus(stateName) : ctx.useNexusAll();
}

const useSelector = <K extends keyof S>(selector: (state: S) => S[K]): S[K] => {
  const ctx = contextExist();
  return ctx.useSelector(selector);
};

// –•—É–∫ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è —Å–æ—Å—Ç–æ—è–Ω–∏—è
const useSetNexus = () => {
  const ctx = contextExist();
  return ctx.useSetNexus();
};

export { useGetNexus, useSetNexus, useSelector, NexusProvider };
